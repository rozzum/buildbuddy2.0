#!/usr/bin/env python3
"""
Final test script for formatting fixes
"""

import asyncio
import sys
import os

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_formatting_fix_final():
    """Test final formatting fixes."""
    print("üß™ Testing final formatting fixes...")
    
    try:
        # Test OpenRouter service
        from app.services.openrouter_service import OpenRouterService
        openrouter_service = OpenRouterService()
        
        print(f"‚úÖ OpenRouter service initialized")
        
        # Check system prompts for proper formatting
        ru_prompt = openrouter_service.system_prompt_ru
        en_prompt = openrouter_service.system_prompt_en
        
        print("\nüìù Testing system prompts...")
        
        # Check for no special formatting symbols
        if "**" not in ru_prompt and "**" not in en_prompt:
            print("‚úÖ No ** symbols in system prompts")
        else:
            print("‚ùå ** symbols found in system prompts")
            return False
        
        if "###" not in ru_prompt and "###" not in en_prompt:
            print("‚úÖ No ### symbols in system prompts")
        else:
            print("‚ùå ### symbols found in system prompts")
            return False
        
        # Check for proper instructions
        if "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** –∏–ª–∏ ### –≤ –æ—Ç–≤–µ—Ç–∞—Ö" in ru_prompt:
            print("‚úÖ Russian prompt has proper formatting instructions")
        else:
            print("‚ùå Russian prompt missing formatting instructions")
            return False
        
        if "IMPORTANT: Do not use ** or ### symbols in responses" in en_prompt:
            print("‚úÖ English prompt has proper formatting instructions")
        else:
            print("‚ùå English prompt missing formatting instructions")
            return False
        
        # Test vision prompts
        print("\nüì∏ Testing vision prompts...")
        
        # Simulate vision prompt generation
        user_input = ""
        language = "russian"
        
        if user_input:
            analysis_prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_input}"

–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏ –¥–∏–∑–∞–π–Ω–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç.

–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** –∏–ª–∏ ### –≤ –æ—Ç–≤–µ—Ç–∞—Ö. –ü–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""
        else:
            analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä:

–ß—Ç–æ –≤–∏–∂—É:
- –°—Ç–∏–ª—å –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∫—É –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
- –î–µ—Ç–∞–ª–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É

–û—Ü–µ–Ω–∫–∞:
- –ü–ª—é—Å—ã –¥–∏–∑–∞–π–Ω–∞
- –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** –∏–ª–∏ ### –≤ –æ—Ç–≤–µ—Ç–∞—Ö. –ü–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""
        
        if "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** –∏–ª–∏ ### –≤ –æ—Ç–≤–µ—Ç–∞—Ö" in analysis_prompt:
            print("‚úÖ Vision prompt has proper formatting instructions")
        else:
            print("‚ùå Vision prompt missing formatting instructions")
            return False
        
        # Check for no special symbols in vision prompts
        if "**" not in analysis_prompt and "###" not in analysis_prompt:
            print("‚úÖ No special symbols in vision prompts")
        else:
            print("‚ùå Special symbols found in vision prompts")
            return False
        
        print("üéâ Final formatting fixes working correctly!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing final formatting fixes: {e}")
        return False

async def main():
    """Run final formatting fix test."""
    print("üöÄ Testing final formatting fixes...\n")
    
    success = await test_formatting_fix_final()
    
    print("\n" + "="*60)
    if success:
        print("üéâ FINAL FORMATTING FIX TEST PASSED!")
        print("\n‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print("   ‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ ** –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤")
        print("   ‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ ### —Ä–µ—à–µ—Ç–∫–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI")
        print("   ‚Ä¢ AI –Ω–µ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        print("   ‚Ä¢ –û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —á–∏—Å—Ç—ã–º–∏ –±–µ–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ —Ä–µ—à–µ—Ç–æ–∫")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å AI –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç!")
    else:
        print("‚ùå Final formatting fix test failed. Check the errors above.")
    
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
