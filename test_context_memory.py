#!/usr/bin/env python3
"""
Test script for conversation context memory
"""

import asyncio
import sys
import os

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_context_memory():
    """Test conversation context memory functionality."""
    print("üß™ Testing conversation context memory...")
    
    try:
        # Test OpenRouter service
        from app.services.openrouter_service import OpenRouterService
        openrouter_service = OpenRouterService()
        
        print(f"‚úÖ OpenRouter service initialized")
        
        # Test conversation context preparation
        print("\nüìù Testing conversation context preparation...")
        
        # Mock user session
        mock_session = {
            'user_id': 12345,
            'language': 'russian',
            'survey_completed': False
        }
        
        # Test context preparation
        context = openrouter_service._prepare_conversation_context(mock_session)
        print(f"‚úÖ Context preparation returned: {len(context)} messages")
        
        # Test with empty session
        empty_session = {}
        empty_context = openrouter_service._prepare_conversation_context(empty_session)
        print(f"‚úÖ Empty session context: {len(empty_context)} messages")
        
        # Test language detection
        print("\nüåç Testing language detection...")
        
        russian_text = "–ì–¥–µ –∫—É–ø–∏—Ç—å —Ç–∞–∫–æ–π –¥–∏–≤–∞–Ω"
        english_text = "Where to buy this sofa"
        
        is_russian = openrouter_service._is_russian(russian_text)
        is_english = openrouter_service._is_russian(english_text)
        
        print(f"‚úÖ Russian text detected: {is_russian}")
        print(f"‚úÖ English text detected: {not is_english}")
        
        # Test conversation flow simulation
        print("\nüí¨ Testing conversation flow...")
        
        # Simulate conversation context
        conversation_context = [
            {"role": "user", "content": "–ì–¥–µ –∫—É–ø–∏—Ç—å —Ç–∞–∫–æ–π –¥–∏–≤–∞–Ω"},
            {"role": "assistant", "content": "–ü–æ—Ö–æ–∂–∏–π –º–æ–¥—É–ª—å–Ω—ã–π –¥–∏–≤–∞–Ω –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —É –±—Ä–µ–Ω–¥–æ–≤ B&B Italia –∏–ª–∏ Flexform."},
            {"role": "user", "content": "–°–∫–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å? –ú–Ω–µ –Ω—É–∂–µ–Ω 3 –º–µ—Ç—Ä–∞ –¥–ª–∏–Ω–æ–π."}
        ]
        
        print(f"‚úÖ Conversation context prepared: {len(conversation_context)} messages")
        
        # Check if context contains sofa discussion
        sofa_mentioned = any("–¥–∏–≤–∞–Ω" in msg["content"].lower() for msg in conversation_context if msg["role"] == "user")
        print(f"‚úÖ Sofa mentioned in context: {sofa_mentioned}")
        
        print("üéâ Conversation context memory test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing conversation context memory: {e}")
        return False

async def main():
    """Run conversation context memory test."""
    print("üöÄ Testing conversation context memory...\n")
    
    success = await test_context_memory()
    
    print("\n" + "="*60)
    if success:
        print("üéâ CONVERSATION CONTEXT MEMORY TEST PASSED!")
        print("\n‚úÖ –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
        print("   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        print("   ‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ")
        print("   ‚Ä¢ –ù–µ –ø—É—Ç–∞–µ—Ç –¥–∏–≤–∞–Ω —Å –∫—É—Ö–æ–Ω–Ω—ã–º –≥–∞—Ä–Ω–∏—Ç—É—Ä–æ–º")
        print("   ‚Ä¢ –î–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        print("   ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, —Ç–∞–∫ –∏ –¥–ª—è —Ñ–æ—Ç–æ")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª–∏!")
    else:
        print("‚ùå Conversation context memory test failed. Check the errors above.")
    
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
